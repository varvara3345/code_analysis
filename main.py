# main.py

import os
from analyzer.code_parser import CodeAnalyzer


# –ú—ã –ø–æ–∫–∞ –Ω–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º LLM, –Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –º–µ—Å—Ç–æ –¥–ª—è –Ω–µ–µ
# from llm_integration import get_llm_suggestions # –ë—É–¥–µ—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —à–∞–≥–µ

def read_code_from_file(filepath: str) -> str | None:
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞.
    """
    try:
        with open(filepath, 'r', encoding='utf-8') as file:
            return file.read()
    except FileNotFoundError:
        print(f"–û—à–∏–±–∫–∞: –§–∞–π–ª '{filepath}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ '{filepath}': {e}")
        return None


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∏ –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.
    """
    file_to_analyze = 'samples/bad_code.py'

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if not os.path.exists(file_to_analyze):
        print(f"–§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_to_analyze}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ.")
        return

    print(f"--- –ó–∞–ø—É—Å–∫ AI-Powered Code Reviewer ---")
    print(f"–ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: {file_to_analyze}\n")

    code_content = read_code_from_file(file_to_analyze)
    if not code_content:
        return

    analyzer = CodeAnalyzer()
    ast_tree = analyzer.parse_code_to_ast(code_content)

    if ast_tree:
        print("–ü—Ä–æ–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞:")
        analyzer.analyze_inefficient_loops(ast_tree)
        analyzer.analyze_ml_optimizations(ast_tree)  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞

        # –ê–Ω–∞–ª–∏–∑ PEP8 —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞, –∞ –Ω–µ AST
        analyzer.analyze_pep8_compliance(code_content)

        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LLM
    # if ast_tree:
    #     llm_suggestions = get_llm_suggestions(code_content, ast_tree)
    #     analyzer.recommendations.extend(llm_suggestions)

    all_recommendations = analyzer.get_recommendations()

    print("\n--- –û—Ç—á–µ—Ç –æ–± –∞–Ω–∞–ª–∏–∑–µ –∫–æ–¥–∞ ---")
    if all_recommendations:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–∏–ø—É –∏ –ø–æ—Ç–æ–º –ø–æ —Å—Ç—Ä–æ–∫–µ
        all_recommendations.sort(key=lambda x: (x.get('type', ''), x.get('line', 0)))

        for rec in all_recommendations:
            print(f"–¢–∏–ø: {rec.get('type', '–û–±—â–µ–µ')}")
            print(f"–°—Ç—Ä–æ–∫–∞: {rec.get('line', 'N/A')}")
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {rec.get('message', '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')}")
            if rec.get('code_snippet'):
                # –í—ã–≤–æ–¥–∏–º —Å–Ω–∏–ø–ø–µ—Ç –∫–æ–¥–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                print("–°–Ω–∏–ø–ø–µ—Ç –∫–æ–¥–∞:")
                for line in rec['code_snippet'].splitlines():
                    print(f"    | {line}")  # –î–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            print("-" * 30)
    else:
        print("üöÄ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


if __name__ == "__main__":
    main()